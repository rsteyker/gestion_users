{"version":3,"sources":["users.controllers.js"],"names":["Users","require","Todos","createUser","req","res","body","username","email","password","status","json","error","message","create","send","updateTodos","id","params","complited","update","where","module","exports"],"mappings":";;AAAA;AACA,IAAMA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB,C,CAEA;;;AACA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX;AAFW,sBAG2BD,GAAG,CAACE,IAH/B,EAGHC,QAHG,aAGHA,QAHG,EAGOC,KAHP,aAGOA,KAHP,EAGcC,QAHd,aAGcA,QAHd,EAKX;;AALW,gBAMP,OAAOF,QAAP,KAAqB,QAArB,IAAiC,CAACA,QAN3B;AAAA;AAAA;AAAA;;AAAA,2CAOAF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,YAAAA,KAAK,EAAE,kBADiB;AAExBC,YAAAA,OAAO,EAAE;AAFe,WAArB,CAPA;;AAAA;AAAA,gBAYP,OAAOL,KAAP,KAAkB,QAAlB,IAA8B,CAACA,KAZxB;AAAA;AAAA;AAAA;;AAAA,2CAaAH,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,YAAAA,KAAK,EAAE,gBADiB;AAExBC,YAAAA,OAAO,EAAE;AAFe,WAArB,CAbA;;AAAA;AAAA,gBAkBP,OAAOJ,QAAP,KAAqB,QAArB,IAAiC,CAACA,QAlB3B;AAAA;AAAA;AAAA;;AAAA,2CAmBAJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,YAAAA,KAAK,EAAE,mBADiB;AAExBC,YAAAA,OAAO,EAAE;AAFe,WAArB,CAnBA;;AAAA;AAAA;AAAA,0CAyBLb,KAAK,CAACc,MAAN,CAAa;AAACP,YAAAA,QAAQ,EAARA,QAAD;AAAWC,YAAAA,KAAK,EAALA,KAAX;AAAkBC,YAAAA,QAAQ,EAARA;AAAlB,WAAb,CAzBK;;AAAA;AA0BXJ,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBK,IAAhB;AA1BW;AAAA;;AAAA;AAAA;AAAA;AA6BXV,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;AA7BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,C,CAiCA;;;AACA,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAAOZ,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELY,UAAAA,EAFK,GAECb,GAAG,CAACc,MAFL,CAELD,EAFK;AAGLE,UAAAA,SAHK,GAGSf,GAAG,CAACE,IAHb,CAGLa,SAHK;AAAA;AAAA,0CAKNjB,KAAK,CAACkB,MAAN,CAAa;AAACD,YAAAA,SAAS,EAATA;AAAD,WAAb,EAA0B;AAC5BE,YAAAA,KAAK,EAAE;AAACJ,cAAAA,EAAE,EAAFA;AAAD;AADqB,WAA1B,CALM;;AAAA;AAQZZ,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBK,IAAhB;AARY;AAAA;;AAAA;AAAA;AAAA;AAUZV,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAeAW,MAAM,CAACC,OAAP,GAAiB;AACbpB,EAAAA,UAAU,EAAVA,UADa;AAEba,EAAAA,WAAW,EAAXA;AAFa,CAAjB","sourcesContent":["//Importamos el middleware\r\nconst Users = require(\"../model/users.model\");\r\nconst Todos = require(\"../model/todos.model\");\r\n\r\n//Crea los users\r\nconst createUser = async (req, res) => {\r\n    try {\r\n        //Validamos la información\r\n        const { username, email, password } = req.body;\r\n\r\n        //Aseguramos de que no venga los campos vacíos\r\n        if (typeof(username) !== \"string\" || !username) {\r\n            return res.status(400).json({\r\n                error: \"Usuario invalida\",\r\n                message: \"El nombre de usuario no puede ser nulo o diferente a la cadena de texto\" \r\n            })\r\n        }\r\n        if (typeof(email) !== \"string\" || !email) {\r\n            return res.status(400).json({\r\n                error: \"Email invalida\",\r\n                message: \"El nombre del mail no puede ser nulo o diferente a la cadena de texto\" \r\n            })\r\n        }\r\n        if (typeof(password) !== \"string\" || !password) {\r\n            return res.status(400).json({\r\n                error: \"Password invalida\",\r\n                message: \"Password no puede ser nulo o diferente a la cadena de texto\" \r\n            })\r\n        }\r\n\r\n        await Users.create({username, email, password});\r\n        res.status(201).send();\r\n        \r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n}\r\n\r\n//Cambiar el atributo complited de una tarea\r\nconst updateTodos = async (req, res) => {\r\n    try {\r\n        const {id} = req.params;\r\n        const {complited } = req.body;\r\n\r\n        await Todos.update({complited}, {\r\n            where: {id}\r\n        });\r\n        res.status(204).send();\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    createUser,\r\n    updateTodos\r\n};"],"file":"users.controllers.dev.js"}