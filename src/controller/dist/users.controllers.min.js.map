{"version":3,"sources":["users.controllers.js"],"names":["Users","require","Todos","req","res","_req$body","username","email","password","regeneratorRuntime","async","_context","prev","next","body","createUser","abrupt","status","json","error","message","awrap","create","send","t0","stop","updateTodos","id","complited","_context2","update","where"],"mappings":"aACA,IAAMA,MAAQC,QAAQ,wBADtBC,MAAAD,QAAA,wBAEMC,WAAe,SAACC,EAAAC,GAAD,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAAAF,EAAAC,KAAA,EAAAP,EAGFF,EAAAW,KAAHR,EAHKD,EAGLC,SAAVS,EAHeV,EAGfU,MAAAA,EAHeV,EAGfU,SAAa,iBAAAT,GAAAA,EAHE,CAAAK,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAGFZ,EAAAa,OAAA,KAAAC,KAAA,CAAAC,MAAA,mBAAAC,QAAA,6EAHE,KAAA,EAAA,GAGF,iBAAAb,GAAAA,EAHE,CAAAI,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAgBFZ,EAAIa,OAAO,KAAKC,KAAK,CAP5BC,MAAOb,iBANAc,QAAA,2EAHE,KAAA,EAAA,GAqBY,iBAAdZ,GAA2BA,EArBzB,CAAAG,EAAAE,KAAA,EAAA,MAAA,OAAAF,EAAAK,OAAA,SAGFZ,EAAAa,OAAA,KAAAC,KAAA,CAQHC,MAAO,oBACPC,QAAS,iEAZJ,KAAA,EAAA,OAAAT,EAAAE,KAAA,GAAAJ,mBAAAY,MAGFrB,MAYPsB,OAAOf,CAAPD,SAAAA,EAAkBC,MAAAA,EAAYC,SAAAA,KAfrB,KAAA,GAGFJ,EAAAa,OAAA,KAAAM,OAHEZ,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,MAAA,GAgCbP,EAAIa,OAAO,KAAKC,KAAhBP,EAAAa,IAhCa,KAAA,GAAA,IAAA,MAAA,OAAAb,EAAAc,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAqCfC,YAAc,SAAOvB,EAAKC,GAAZ,IAAAuB,EAAAC,EAAA,OAAAnB,mBAAAC,MAAA,SAAAmB,GAAA,OAAA,OAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,KAAA,EAAA,OAAAgB,EAAAjB,KAAA,EAlCDe,EAkBPxB,EAAOK,OAlBAmB,GAAAC,EAAAzB,EAAAW,KAAAc,UAkCCC,EAAAhB,KAAA,EAAAJ,mBAAAY,MAlCDnB,MAAA4B,OAAA,CAAAF,UAAAA,GAAA,CAwCPG,MAAO,CAACJ,GAAAA,MANA,KAAA,EAdJR,EAAAA,OAAO,KAAAI,OAcHM,EAAAhB,KAAA,GAAA,MAAA,KAAA,EAAAgB,EAAAjB,KAAA,EAAAiB,EAAAL,GAAAK,EAAA,MAAA,GAfoBzB,EAnBrBa,OAAA,KAAAC,KAmBqBW,EAAAL,IAepB,KAAA,GAAA,IAAA,MAAA,OAAAK,EAAAJ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MATQnB,OAAAA,QAAAA,CAAUC,WAAAA,WAAOC,YAAAA","file":"users.controllers.min.js","sourcesContent":["//Importamos el middleware\r\nconst Users = require(\"../model/users.model\");\r\nconst Todos = require(\"../model/todos.model\");\r\n\r\n//Crea los users\r\nconst createUser = async (req, res) => {\r\n    try {\r\n        //Validamos la información\r\n        const { username, email, password } = req.body;\r\n\r\n        //Aseguramos de que no venga los campos vacíos\r\n        if (typeof(username) !== \"string\" || !username) {\r\n            return res.status(400).json({\r\n                error: \"Usuario invalida\",\r\n                message: \"El nombre de usuario no puede ser nulo o diferente a la cadena de texto\" \r\n            })\r\n        }\r\n        if (typeof(email) !== \"string\" || !email) {\r\n            return res.status(400).json({\r\n                error: \"Email invalida\",\r\n                message: \"El nombre del mail no puede ser nulo o diferente a la cadena de texto\" \r\n            })\r\n        }\r\n        if (typeof(password) !== \"string\" || !password) {\r\n            return res.status(400).json({\r\n                error: \"Password invalida\",\r\n                message: \"Password no puede ser nulo o diferente a la cadena de texto\" \r\n            })\r\n        }\r\n\r\n        await Users.create({username, email, password});\r\n        res.status(201).send();\r\n        \r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n}\r\n\r\n//Cambiar el atributo complited de una tarea\r\nconst updateTodos = async (req, res) => {\r\n    try {\r\n        const {id} = req.params;\r\n        const {complited } = req.body;\r\n\r\n        await Todos.update({complited}, {\r\n            where: {id}\r\n        });\r\n        res.status(204).send();\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    createUser,\r\n    updateTodos\r\n};"]}